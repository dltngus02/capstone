{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/leesuhyeon/Desktop/2024 1\\uD559\\uAE30 \\uACFC\\uC81C/\\uCEA1\\uB514/coding/front/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\r\n   * `Socket` constructor.\r\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    /**\r\n     * Whether the socket is currently connected to the server.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.connected); // true\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.connected); // false\r\n     * });\r\n     */\n    _this.connected = false;\n    /**\r\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n     * be transmitted by the server.\r\n     */\n    _this.recovered = false;\n    /**\r\n     * Buffer for packets received before the CONNECT packet\r\n     */\n    _this.receiveBuffer = [];\n    /**\r\n     * Buffer for packets that will be sent once the socket is connected\r\n     */\n    _this.sendBuffer = [];\n    /**\r\n     * The queue of packets to be sent with retry in case of failure.\r\n     *\r\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n     * @private\r\n     */\n    _this._queue = [];\n    /**\r\n     * A sequence to generate the ID of the {@link QueuedPacket}.\r\n     * @private\r\n     */\n    _this._queueSeq = 0;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    _this._opts = Object.assign({}, opts);\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"connect\", () => {\r\n   *   console.log(socket.disconnected); // false\r\n   * });\r\n   *\r\n   * socket.on(\"disconnect\", () => {\r\n   *   console.log(socket.disconnected); // true\r\n   * });\r\n   */\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * console.log(socket.active); // true\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   if (reason === \"io server disconnect\") {\r\n     *     // the disconnection was initiated by the server, you need to manually reconnect\r\n     *     console.log(socket.active); // false\r\n     *   }\r\n     *   // else the socket will automatically try to reconnect\r\n     *   console.log(socket.active); // true\r\n     * });\r\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @example\r\n     * const socket = io({\r\n     *   autoConnect: false\r\n     * });\r\n     *\r\n     * socket.connect();\r\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\r\n     * Alias for {@link connect()}.\r\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * This method mimics the WebSocket.send() method.\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n     *\r\n     * @example\r\n     * socket.send(\"hello\");\r\n     *\r\n     * // this is equivalent to\r\n     * socket.emit(\"message\", \"hello\");\r\n     *\r\n     * @return self\r\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @example\r\n     * socket.emit(\"hello\", \"world\");\r\n     *\r\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n     *\r\n     * // with an acknowledgement from the server\r\n     * socket.emit(\"hello\", \"world\", (val) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * @return self\r\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\r\n     * @private\r\n     */\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n      var _a;\n      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\r\n     * Emits an event and waits for an acknowledgement\r\n     *\r\n     * @example\r\n     * // without timeout\r\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n     *\r\n     * // with a specific timeout\r\n     * try {\r\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n     * } catch (err) {\r\n     *   // the server did not acknowledge the event in the given delay\r\n     * }\r\n     *\r\n     * @return a Promise that will be fulfilled when the server acknowledges the event\r\n     */\n  }, {\n    key: \"emitWithAck\",\n    value: function emitWithAck(ev) {\n      var _this3 = this;\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      // the timeout flag is optional\n      var withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n      return new Promise(function (resolve, reject) {\n        args.push(function (arg1, arg2) {\n          if (withErr) {\n            return arg1 ? reject(arg1) : resolve(arg2);\n          } else {\n            return resolve(arg1);\n          }\n        });\n        _this3.emit.apply(_this3, [ev].concat(args));\n      });\n    }\n    /**\r\n     * Add the packet to the queue.\r\n     * @param args\r\n     * @private\r\n     */\n  }, {\n    key: \"_addToQueue\",\n    value: function _addToQueue(args) {\n      var _this4 = this;\n      var ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      var packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args: args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push(function (err) {\n        if (packet !== _this4._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        var hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > _this4._opts.retries) {\n            _this4._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          _this4._queue.shift();\n          if (ack) {\n            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n              responseArgs[_key5 - 1] = arguments[_key5];\n            }\n            ack.apply(void 0, [null].concat(responseArgs));\n          }\n        }\n        packet.pending = false;\n        return _this4._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\r\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n     * @param force - whether to resend a packet that has not been acknowledged yet\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"_drainQueue\",\n    value: function _drainQueue() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      var packet = this._queue[0];\n      if (packet.pending && !force) {\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this5 = this;\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this5._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\r\n     * Sends a CONNECT packet to initiate the Socket.IO session.\r\n     *\r\n     * @param data\r\n     * @private\r\n     */\n  }, {\n    key: \"_sendConnectPacket\",\n    value: function _sendConnectPacket(data) {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this6 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this6.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this6.notifyOutgoingListeners(packet);\n        _this6.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\r\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n     *\r\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   // console.log(reason); prints \"io client disconnect\"\r\n     * });\r\n     *\r\n     * socket.disconnect();\r\n     *\r\n     * @return self\r\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\r\n     * Alias for {@link disconnect()}.\r\n     *\r\n     * @return self\r\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @example\r\n     * socket.compress(false).emit(\"hello\");\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @example\r\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n     *\r\n     * @returns self\r\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * @example\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     *\r\n     * @returns self\r\n     */\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @example\r\n     * socket.onAny((event, ...args) => {\r\n     *   console.log(`got ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @example\r\n     * socket.prependAny((event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAny(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAny(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAny();\r\n     *\r\n     * @param listener\r\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAnyOutgoing(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAnyOutgoing();\r\n     *\r\n     * @param [listener] - the catch-all listener (optional)\r\n     */\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","_Emitter","_inherits","_super","_createSuper","io","nsp","opts","_this","_classCallCheck","call","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","_createClass","key","get","value","subEvents","subs","onopen","bind","onpacket","onerror","onclose","_readyState","send","_len","arguments","length","args","Array","_key","unshift","emit","apply","ev","hasOwnProperty","Error","toString","_len2","_key2","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_this2","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","clearTimeoutFn","_len3","_key3","concat","emitWithAck","_this3","_len4","_key4","withErr","Promise","resolve","reject","arg1","arg2","_this4","tryCount","pending","err","hasError","shift","_len5","responseArgs","_key5","_drainQueue","force","_packet","_this5","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","_iterator","_createForOfIteratorHelper","_step","s","n","done","listener","e","f","_get","_getPrototypeOf","prototype","self","sent","_len6","_key6","emitBuffered","_this6","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","_iterator2","_step2"],"sources":["C:/Users/leesuhyeon/Desktop/2024 1학기 과제/캡디/coding/front/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        /**\r\n         * Whether the socket is currently connected to the server.\r\n         *\r\n         * @example\r\n         * const socket = io();\r\n         *\r\n         * socket.on(\"connect\", () => {\r\n         *   console.log(socket.connected); // true\r\n         * });\r\n         *\r\n         * socket.on(\"disconnect\", () => {\r\n         *   console.log(socket.connected); // false\r\n         * });\r\n         */\r\n        this.connected = false;\r\n        /**\r\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n         * be transmitted by the server.\r\n         */\r\n        this.recovered = false;\r\n        /**\r\n         * Buffer for packets received before the CONNECT packet\r\n         */\r\n        this.receiveBuffer = [];\r\n        /**\r\n         * Buffer for packets that will be sent once the socket is connected\r\n         */\r\n        this.sendBuffer = [];\r\n        /**\r\n         * The queue of packets to be sent with retry in case of failure.\r\n         *\r\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n         * @private\r\n         */\r\n        this._queue = [];\r\n        /**\r\n         * A sequence to generate the ID of the {@link QueuedPacket}.\r\n         * @private\r\n         */\r\n        this._queueSeq = 0;\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        this._opts = Object.assign({}, opts);\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.disconnected); // false\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.disconnected); // true\r\n     * });\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * console.log(socket.active); // true\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   if (reason === \"io server disconnect\") {\r\n     *     // the disconnection was initiated by the server, you need to manually reconnect\r\n     *     console.log(socket.active); // false\r\n     *   }\r\n     *   // else the socket will automatically try to reconnect\r\n     *   console.log(socket.active); // true\r\n     * });\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @example\r\n     * const socket = io({\r\n     *   autoConnect: false\r\n     * });\r\n     *\r\n     * socket.connect();\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link connect()}.\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * This method mimics the WebSocket.send() method.\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n     *\r\n     * @example\r\n     * socket.send(\"hello\");\r\n     *\r\n     * // this is equivalent to\r\n     * socket.emit(\"message\", \"hello\");\r\n     *\r\n     * @return self\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @example\r\n     * socket.emit(\"hello\", \"world\");\r\n     *\r\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n     *\r\n     * // with an acknowledgement from the server\r\n     * socket.emit(\"hello\", \"world\", (val) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * @return self\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\r\n            this._addToQueue(args);\r\n            return this;\r\n        }\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        var _a;\r\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Emits an event and waits for an acknowledgement\r\n     *\r\n     * @example\r\n     * // without timeout\r\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n     *\r\n     * // with a specific timeout\r\n     * try {\r\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n     * } catch (err) {\r\n     *   // the server did not acknowledge the event in the given delay\r\n     * }\r\n     *\r\n     * @return a Promise that will be fulfilled when the server acknowledges the event\r\n     */\r\n    emitWithAck(ev, ...args) {\r\n        // the timeout flag is optional\r\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\r\n        return new Promise((resolve, reject) => {\r\n            args.push((arg1, arg2) => {\r\n                if (withErr) {\r\n                    return arg1 ? reject(arg1) : resolve(arg2);\r\n                }\r\n                else {\r\n                    return resolve(arg1);\r\n                }\r\n            });\r\n            this.emit(ev, ...args);\r\n        });\r\n    }\r\n    /**\r\n     * Add the packet to the queue.\r\n     * @param args\r\n     * @private\r\n     */\r\n    _addToQueue(args) {\r\n        let ack;\r\n        if (typeof args[args.length - 1] === \"function\") {\r\n            ack = args.pop();\r\n        }\r\n        const packet = {\r\n            id: this._queueSeq++,\r\n            tryCount: 0,\r\n            pending: false,\r\n            args,\r\n            flags: Object.assign({ fromQueue: true }, this.flags),\r\n        };\r\n        args.push((err, ...responseArgs) => {\r\n            if (packet !== this._queue[0]) {\r\n                // the packet has already been acknowledged\r\n                return;\r\n            }\r\n            const hasError = err !== null;\r\n            if (hasError) {\r\n                if (packet.tryCount > this._opts.retries) {\r\n                    this._queue.shift();\r\n                    if (ack) {\r\n                        ack(err);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._queue.shift();\r\n                if (ack) {\r\n                    ack(null, ...responseArgs);\r\n                }\r\n            }\r\n            packet.pending = false;\r\n            return this._drainQueue();\r\n        });\r\n        this._queue.push(packet);\r\n        this._drainQueue();\r\n    }\r\n    /**\r\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n     * @param force - whether to resend a packet that has not been acknowledged yet\r\n     *\r\n     * @private\r\n     */\r\n    _drainQueue(force = false) {\r\n        if (!this.connected || this._queue.length === 0) {\r\n            return;\r\n        }\r\n        const packet = this._queue[0];\r\n        if (packet.pending && !force) {\r\n            return;\r\n        }\r\n        packet.pending = true;\r\n        packet.tryCount++;\r\n        this.flags = packet.flags;\r\n        this.emit.apply(this, packet.args);\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this._sendConnectPacket(data);\r\n            });\r\n        }\r\n        else {\r\n            this._sendConnectPacket(this.auth);\r\n        }\r\n    }\r\n    /**\r\n     * Sends a CONNECT packet to initiate the Socket.IO session.\r\n     *\r\n     * @param data\r\n     * @private\r\n     */\r\n    _sendConnectPacket(data) {\r\n        this.packet({\r\n            type: PacketType.CONNECT,\r\n            data: this._pid\r\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\r\n                : data,\r\n        });\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    this.onconnect(packet.data.sid, packet.data.pid);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\r\n            this._lastOffset = args[args.length - 1];\r\n        }\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id, pid) {\r\n        this.id = id;\r\n        this.recovered = pid && this._pid === pid;\r\n        this._pid = pid; // defined only if connection state recovery is enabled\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n        this._drainQueue(true);\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n     *\r\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   // console.log(reason); prints \"io client disconnect\"\r\n     * });\r\n     *\r\n     * socket.disconnect();\r\n     *\r\n     * @return self\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link disconnect()}.\r\n     *\r\n     * @return self\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @example\r\n     * socket.compress(false).emit(\"hello\");\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @example\r\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n     *\r\n     * @returns self\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * @example\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     *\r\n     * @returns self\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @example\r\n     * socket.onAny((event, ...args) => {\r\n     *   console.log(`got ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @example\r\n     * socket.prependAny((event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAny(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAny(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAny();\r\n     *\r\n     * @param listener\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAnyOutgoing(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAnyOutgoing();\r\n     *\r\n     * @param [listener] - the catch-all listener (optional)\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,EAAE,QAAQ,SAAS;AAC5B,SAASC,OAAO,QAAS,8BAA8B;AACvD;AACA;AACA;AACA;AACA,IAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC;EAClCC,OAAO,EAAE,CAAC;EACVC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChB;EACAC,WAAW,EAAE,CAAC;EACdC,cAAc,EAAE;AACpB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,MAAM,0BAAAC,QAAA;EAAAC,SAAA,CAAAF,MAAA,EAAAC,QAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,MAAA;EACf;AACJ;AACA;EACI,SAAAA,OAAYK,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,MAAA;IACvBQ,KAAA,GAAAL,MAAA,CAAAO,IAAA;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQF,KAAA,CAAKG,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;IACQH,KAAA,CAAKI,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQJ,KAAA,CAAKK,aAAa,GAAG,EAAE;IACvB;AACR;AACA;IACQL,KAAA,CAAKM,UAAU,GAAG,EAAE;IACpB;AACR;AACA;AACA;AACA;AACA;IACQN,KAAA,CAAKO,MAAM,GAAG,EAAE;IAChB;AACR;AACA;AACA;IACQP,KAAA,CAAKQ,SAAS,GAAG,CAAC;IAClBR,KAAA,CAAKS,GAAG,GAAG,CAAC;IACZT,KAAA,CAAKU,IAAI,GAAG,CAAC,CAAC;IACdV,KAAA,CAAKW,KAAK,GAAG,CAAC,CAAC;IACfX,KAAA,CAAKH,EAAE,GAAGA,EAAE;IACZG,KAAA,CAAKF,GAAG,GAAGA,GAAG;IACd,IAAIC,IAAI,IAAIA,IAAI,CAACa,IAAI,EAAE;MACnBZ,KAAA,CAAKY,IAAI,GAAGb,IAAI,CAACa,IAAI;IACzB;IACAZ,KAAA,CAAKa,KAAK,GAAG7B,MAAM,CAAC8B,MAAM,CAAC,CAAC,CAAC,EAAEf,IAAI,CAAC;IACpC,IAAIC,KAAA,CAAKH,EAAE,CAACkB,YAAY,EACpBf,KAAA,CAAKgB,IAAI,CAAC,CAAC;IAAC,OAAAhB,KAAA;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAbIiB,YAAA,CAAAzB,MAAA;IAAA0B,GAAA;IAAAC,GAAA,EAcA,SAAAA,IAAA,EAAmB;MACf,OAAO,CAAC,IAAI,CAAChB,SAAS;IAC1B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAe,GAAA;IAAAE,KAAA,EAKA,SAAAC,UAAA,EAAY;MACR,IAAI,IAAI,CAACC,IAAI,EACT;MACJ,IAAMzB,EAAE,GAAG,IAAI,CAACA,EAAE;MAClB,IAAI,CAACyB,IAAI,GAAG,CACRzC,EAAE,CAACgB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC0B,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACtC3C,EAAE,CAACgB,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC4B,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,EAC1C3C,EAAE,CAACgB,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC6B,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,EACxC3C,EAAE,CAACgB,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC8B,OAAO,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC,CAC3C;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAhBI;IAAAN,GAAA;IAAAC,GAAA,EAiBA,SAAAA,IAAA,EAAa;MACT,OAAO,CAAC,CAAC,IAAI,CAACG,IAAI;IACtB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAAJ,GAAA;IAAAE,KAAA,EAUA,SAAAlC,QAAA,EAAU;MACN,IAAI,IAAI,CAACiB,SAAS,EACd,OAAO,IAAI;MACf,IAAI,CAACkB,SAAS,CAAC,CAAC;MAChB,IAAI,CAAC,IAAI,CAACxB,EAAE,CAAC,eAAe,CAAC,EACzB,IAAI,CAACA,EAAE,CAACmB,IAAI,CAAC,CAAC,CAAC,CAAC;MACpB,IAAI,MAAM,KAAK,IAAI,CAACnB,EAAE,CAAC+B,WAAW,EAC9B,IAAI,CAACL,MAAM,CAAC,CAAC;MACjB,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAAL,GAAA;IAAAE,KAAA,EAGA,SAAAJ,KAAA,EAAO;MACH,OAAO,IAAI,CAAC9B,OAAO,CAAC,CAAC;IACzB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdI;IAAAgC,GAAA;IAAAE,KAAA,EAeA,SAAAS,KAAA,EAAc;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACRF,IAAI,CAACG,OAAO,CAAC,SAAS,CAAC;MACvB,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;MAC3B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAhBI;IAAAf,GAAA;IAAAE,KAAA,EAiBA,SAAAiB,KAAKE,EAAE,EAAW;MACd,IAAIxD,eAAe,CAACyD,cAAc,CAACD,EAAE,CAAC,EAAE;QACpC,MAAM,IAAIE,KAAK,CAAC,GAAG,GAAGF,EAAE,CAACG,QAAQ,CAAC,CAAC,GAAG,4BAA4B,CAAC;MACvE;MAAC,SAAAC,KAAA,GAAAZ,SAAA,CAAAC,MAAA,EAHOC,IAAI,OAAAC,KAAA,CAAAS,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJX,IAAI,CAAAW,KAAA,QAAAb,SAAA,CAAAa,KAAA;MAAA;MAIZX,IAAI,CAACG,OAAO,CAACG,EAAE,CAAC;MAChB,IAAI,IAAI,CAAC1B,KAAK,CAACgC,OAAO,IAAI,CAAC,IAAI,CAAClC,KAAK,CAACmC,SAAS,IAAI,CAAC,IAAI,CAACnC,KAAK,CAACoC,QAAQ,EAAE;QACrE,IAAI,CAACC,WAAW,CAACf,IAAI,CAAC;QACtB,OAAO,IAAI;MACf;MACA,IAAMgB,MAAM,GAAG;QACXC,IAAI,EAAEtE,UAAU,CAACuE,KAAK;QACtBC,IAAI,EAAEnB;MACV,CAAC;MACDgB,MAAM,CAACI,OAAO,GAAG,CAAC,CAAC;MACnBJ,MAAM,CAACI,OAAO,CAACC,QAAQ,GAAG,IAAI,CAAC3C,KAAK,CAAC2C,QAAQ,KAAK,KAAK;MACvD;MACA,IAAI,UAAU,KAAK,OAAOrB,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,EAAE;QAC7C,IAAMuB,EAAE,GAAG,IAAI,CAAC9C,GAAG,EAAE;QACrB,IAAM+C,GAAG,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAAC;QACtB,IAAI,CAACC,oBAAoB,CAACH,EAAE,EAAEC,GAAG,CAAC;QAClCP,MAAM,CAACM,EAAE,GAAGA,EAAE;MAClB;MACA,IAAMI,mBAAmB,GAAG,IAAI,CAAC9D,EAAE,CAAC+D,MAAM,IACtC,IAAI,CAAC/D,EAAE,CAAC+D,MAAM,CAACC,SAAS,IACxB,IAAI,CAAChE,EAAE,CAAC+D,MAAM,CAACC,SAAS,CAACC,QAAQ;MACrC,IAAMC,aAAa,GAAG,IAAI,CAACpD,KAAK,CAACoC,QAAQ,KAAK,CAACY,mBAAmB,IAAI,CAAC,IAAI,CAACxD,SAAS,CAAC;MACtF,IAAI4D,aAAa,EAAE,CACnB,CAAC,MACI,IAAI,IAAI,CAAC5D,SAAS,EAAE;QACrB,IAAI,CAAC6D,uBAAuB,CAACf,MAAM,CAAC;QACpC,IAAI,CAACA,MAAM,CAACA,MAAM,CAAC;MACvB,CAAC,MACI;QACD,IAAI,CAAC3C,UAAU,CAAC2D,IAAI,CAAChB,MAAM,CAAC;MAChC;MACA,IAAI,CAACtC,KAAK,GAAG,CAAC,CAAC;MACf,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAAO,GAAA;IAAAE,KAAA,EAGA,SAAAsC,qBAAqBH,EAAE,EAAEC,GAAG,EAAE;MAAA,IAAAU,MAAA;MAC1B,IAAIC,EAAE;MACN,IAAMC,OAAO,GAAG,CAACD,EAAE,GAAG,IAAI,CAACxD,KAAK,CAACyD,OAAO,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACwD,UAAU;MAChG,IAAID,OAAO,KAAKE,SAAS,EAAE;QACvB,IAAI,CAAC5D,IAAI,CAAC6C,EAAE,CAAC,GAAGC,GAAG;QACnB;MACJ;MACA;MACA,IAAMe,KAAK,GAAG,IAAI,CAAC1E,EAAE,CAAC2E,YAAY,CAAC,YAAM;QACrC,OAAON,MAAI,CAACxD,IAAI,CAAC6C,EAAE,CAAC;QACpB,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAI,CAAC5D,UAAU,CAAC0B,MAAM,EAAEyC,CAAC,EAAE,EAAE;UAC7C,IAAIP,MAAI,CAAC5D,UAAU,CAACmE,CAAC,CAAC,CAAClB,EAAE,KAAKA,EAAE,EAAE;YAC9BW,MAAI,CAAC5D,UAAU,CAACoE,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;UAChC;QACJ;QACAjB,GAAG,CAACtD,IAAI,CAACgE,MAAI,EAAE,IAAIzB,KAAK,CAAC,yBAAyB,CAAC,CAAC;MACxD,CAAC,EAAE2B,OAAO,CAAC;MACX,IAAI,CAAC1D,IAAI,CAAC6C,EAAE,CAAC,GAAG,YAAa;QACzB;QACAW,MAAI,CAACrE,EAAE,CAAC8E,cAAc,CAACJ,KAAK,CAAC;QAAC,SAAAK,KAAA,GAAA7C,SAAA,CAAAC,MAAA,EAFdC,IAAI,OAAAC,KAAA,CAAA0C,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;UAAJ5C,IAAI,CAAA4C,KAAA,IAAA9C,SAAA,CAAA8C,KAAA;QAAA;QAGpBrB,GAAG,CAAClB,KAAK,CAAC4B,MAAI,GAAG,IAAI,EAAAY,MAAA,CAAK7C,IAAI,CAAC,CAAC;MACpC,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfI;IAAAf,GAAA;IAAAE,KAAA,EAgBA,SAAA2D,YAAYxC,EAAE,EAAW;MAAA,IAAAyC,MAAA;MAAA,SAAAC,KAAA,GAAAlD,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAA+C,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJjD,IAAI,CAAAiD,KAAA,QAAAnD,SAAA,CAAAmD,KAAA;MAAA;MACnB;MACA,IAAMC,OAAO,GAAG,IAAI,CAACxE,KAAK,CAACyD,OAAO,KAAKE,SAAS,IAAI,IAAI,CAACzD,KAAK,CAACwD,UAAU,KAAKC,SAAS;MACvF,OAAO,IAAIc,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACpCrD,IAAI,CAACgC,IAAI,CAAC,UAACsB,IAAI,EAAEC,IAAI,EAAK;UACtB,IAAIL,OAAO,EAAE;YACT,OAAOI,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC,GAAGF,OAAO,CAACG,IAAI,CAAC;UAC9C,CAAC,MACI;YACD,OAAOH,OAAO,CAACE,IAAI,CAAC;UACxB;QACJ,CAAC,CAAC;QACFP,MAAI,CAAC3C,IAAI,CAAAC,KAAA,CAAT0C,MAAI,GAAMzC,EAAE,EAAAuC,MAAA,CAAK7C,IAAI,EAAC;MAC1B,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAf,GAAA;IAAAE,KAAA,EAKA,SAAA4B,YAAYf,IAAI,EAAE;MAAA,IAAAwD,MAAA;MACd,IAAIjC,GAAG;MACP,IAAI,OAAOvB,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;QAC7CwB,GAAG,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAAC;MACpB;MACA,IAAMR,MAAM,GAAG;QACXM,EAAE,EAAE,IAAI,CAAC/C,SAAS,EAAE;QACpBkF,QAAQ,EAAE,CAAC;QACXC,OAAO,EAAE,KAAK;QACd1D,IAAI,EAAJA,IAAI;QACJtB,KAAK,EAAE3B,MAAM,CAAC8B,MAAM,CAAC;UAAEgC,SAAS,EAAE;QAAK,CAAC,EAAE,IAAI,CAACnC,KAAK;MACxD,CAAC;MACDsB,IAAI,CAACgC,IAAI,CAAC,UAAC2B,GAAG,EAAsB;QAChC,IAAI3C,MAAM,KAAKwC,MAAI,CAAClF,MAAM,CAAC,CAAC,CAAC,EAAE;UAC3B;UACA;QACJ;QACA,IAAMsF,QAAQ,GAAGD,GAAG,KAAK,IAAI;QAC7B,IAAIC,QAAQ,EAAE;UACV,IAAI5C,MAAM,CAACyC,QAAQ,GAAGD,MAAI,CAAC5E,KAAK,CAACgC,OAAO,EAAE;YACtC4C,MAAI,CAAClF,MAAM,CAACuF,KAAK,CAAC,CAAC;YACnB,IAAItC,GAAG,EAAE;cACLA,GAAG,CAACoC,GAAG,CAAC;YACZ;UACJ;QACJ,CAAC,MACI;UACDH,MAAI,CAAClF,MAAM,CAACuF,KAAK,CAAC,CAAC;UACnB,IAAItC,GAAG,EAAE;YAAA,SAAAuC,KAAA,GAAAhE,SAAA,CAAAC,MAAA,EAhBEgE,YAAY,OAAA9D,KAAA,CAAA6D,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;cAAZD,YAAY,CAAAC,KAAA,QAAAlE,SAAA,CAAAkE,KAAA;YAAA;YAiBnBzC,GAAG,CAAAlB,KAAA,UAAC,IAAI,EAAAwC,MAAA,CAAKkB,YAAY,EAAC;UAC9B;QACJ;QACA/C,MAAM,CAAC0C,OAAO,GAAG,KAAK;QACtB,OAAOF,MAAI,CAACS,WAAW,CAAC,CAAC;MAC7B,CAAC,CAAC;MACF,IAAI,CAAC3F,MAAM,CAAC0D,IAAI,CAAChB,MAAM,CAAC;MACxB,IAAI,CAACiD,WAAW,CAAC,CAAC;IACtB;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAhF,GAAA;IAAAE,KAAA,EAMA,SAAA8E,YAAA,EAA2B;MAAA,IAAfC,KAAK,GAAApE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuC,SAAA,GAAAvC,SAAA,MAAG,KAAK;MACrB,IAAI,CAAC,IAAI,CAAC5B,SAAS,IAAI,IAAI,CAACI,MAAM,CAACyB,MAAM,KAAK,CAAC,EAAE;QAC7C;MACJ;MACA,IAAMiB,MAAM,GAAG,IAAI,CAAC1C,MAAM,CAAC,CAAC,CAAC;MAC7B,IAAI0C,MAAM,CAAC0C,OAAO,IAAI,CAACQ,KAAK,EAAE;QAC1B;MACJ;MACAlD,MAAM,CAAC0C,OAAO,GAAG,IAAI;MACrB1C,MAAM,CAACyC,QAAQ,EAAE;MACjB,IAAI,CAAC/E,KAAK,GAAGsC,MAAM,CAACtC,KAAK;MACzB,IAAI,CAAC0B,IAAI,CAACC,KAAK,CAAC,IAAI,EAAEW,MAAM,CAAChB,IAAI,CAAC;IACtC;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAf,GAAA;IAAAE,KAAA,EAMA,SAAA6B,OAAOA,OAAM,EAAE;MACXA,OAAM,CAACnD,GAAG,GAAG,IAAI,CAACA,GAAG;MACrB,IAAI,CAACD,EAAE,CAACuG,OAAO,CAACnD,OAAM,CAAC;IAC3B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAA/B,GAAA;IAAAE,KAAA,EAKA,SAAAG,OAAA,EAAS;MAAA,IAAA8E,MAAA;MACL,IAAI,OAAO,IAAI,CAACzF,IAAI,IAAI,UAAU,EAAE;QAChC,IAAI,CAACA,IAAI,CAAC,UAACwC,IAAI,EAAK;UAChBiD,MAAI,CAACC,kBAAkB,CAAClD,IAAI,CAAC;QACjC,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAACkD,kBAAkB,CAAC,IAAI,CAAC1F,IAAI,CAAC;MACtC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAM,GAAA;IAAAE,KAAA,EAMA,SAAAkF,mBAAmBlD,IAAI,EAAE;MACrB,IAAI,CAACH,MAAM,CAAC;QACRC,IAAI,EAAEtE,UAAU,CAAC2H,OAAO;QACxBnD,IAAI,EAAE,IAAI,CAACoD,IAAI,GACTxH,MAAM,CAAC8B,MAAM,CAAC;UAAE2F,GAAG,EAAE,IAAI,CAACD,IAAI;UAAEE,MAAM,EAAE,IAAI,CAACC;QAAY,CAAC,EAAEvD,IAAI,CAAC,GACjEA;MACV,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAlC,GAAA;IAAAE,KAAA,EAMA,SAAAM,QAAQkE,GAAG,EAAE;MACT,IAAI,CAAC,IAAI,CAACzF,SAAS,EAAE;QACjB,IAAI,CAACyG,YAAY,CAAC,eAAe,EAAEhB,GAAG,CAAC;MAC3C;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA1E,GAAA;IAAAE,KAAA,EAOA,SAAAO,QAAQkF,MAAM,EAAEC,WAAW,EAAE;MACzB,IAAI,CAAC3G,SAAS,GAAG,KAAK;MACtB,OAAO,IAAI,CAACoD,EAAE;MACd,IAAI,CAACqD,YAAY,CAAC,YAAY,EAAEC,MAAM,EAAEC,WAAW,CAAC;IACxD;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA5F,GAAA;IAAAE,KAAA,EAMA,SAAAK,SAASwB,MAAM,EAAE;MACb,IAAM8D,aAAa,GAAG9D,MAAM,CAACnD,GAAG,KAAK,IAAI,CAACA,GAAG;MAC7C,IAAI,CAACiH,aAAa,EACd;MACJ,QAAQ9D,MAAM,CAACC,IAAI;QACf,KAAKtE,UAAU,CAAC2H,OAAO;UACnB,IAAItD,MAAM,CAACG,IAAI,IAAIH,MAAM,CAACG,IAAI,CAAC4D,GAAG,EAAE;YAChC,IAAI,CAACC,SAAS,CAAChE,MAAM,CAACG,IAAI,CAAC4D,GAAG,EAAE/D,MAAM,CAACG,IAAI,CAACqD,GAAG,CAAC;UACpD,CAAC,MACI;YACD,IAAI,CAACG,YAAY,CAAC,eAAe,EAAE,IAAInE,KAAK,CAAC,2LAA2L,CAAC,CAAC;UAC9O;UACA;QACJ,KAAK7D,UAAU,CAACuE,KAAK;QACrB,KAAKvE,UAAU,CAACsI,YAAY;UACxB,IAAI,CAACC,OAAO,CAAClE,MAAM,CAAC;UACpB;QACJ,KAAKrE,UAAU,CAACwI,GAAG;QACnB,KAAKxI,UAAU,CAACyI,UAAU;UACtB,IAAI,CAACC,KAAK,CAACrE,MAAM,CAAC;UAClB;QACJ,KAAKrE,UAAU,CAAC2I,UAAU;UACtB,IAAI,CAACC,YAAY,CAAC,CAAC;UACnB;QACJ,KAAK5I,UAAU,CAAC6I,aAAa;UACzB,IAAI,CAACC,OAAO,CAAC,CAAC;UACd,IAAM9B,GAAG,GAAG,IAAInD,KAAK,CAACQ,MAAM,CAACG,IAAI,CAACuE,OAAO,CAAC;UAC1C;UACA/B,GAAG,CAACxC,IAAI,GAAGH,MAAM,CAACG,IAAI,CAACA,IAAI;UAC3B,IAAI,CAACwD,YAAY,CAAC,eAAe,EAAEhB,GAAG,CAAC;UACvC;MACR;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA1E,GAAA;IAAAE,KAAA,EAMA,SAAA+F,QAAQlE,MAAM,EAAE;MACZ,IAAMhB,IAAI,GAAGgB,MAAM,CAACG,IAAI,IAAI,EAAE;MAC9B,IAAI,IAAI,IAAIH,MAAM,CAACM,EAAE,EAAE;QACnBtB,IAAI,CAACgC,IAAI,CAAC,IAAI,CAACT,GAAG,CAACP,MAAM,CAACM,EAAE,CAAC,CAAC;MAClC;MACA,IAAI,IAAI,CAACpD,SAAS,EAAE;QAChB,IAAI,CAACyH,SAAS,CAAC3F,IAAI,CAAC;MACxB,CAAC,MACI;QACD,IAAI,CAAC5B,aAAa,CAAC4D,IAAI,CAACjF,MAAM,CAACC,MAAM,CAACgD,IAAI,CAAC,CAAC;MAChD;IACJ;EAAC;IAAAf,GAAA;IAAAE,KAAA,EACD,SAAAwG,UAAU3F,IAAI,EAAE;MACZ,IAAI,IAAI,CAAC4F,aAAa,IAAI,IAAI,CAACA,aAAa,CAAC7F,MAAM,EAAE;QACjD,IAAM8F,SAAS,GAAG,IAAI,CAACD,aAAa,CAACE,KAAK,CAAC,CAAC;QAAC,IAAAC,SAAA,GAAAC,0BAAA,CACtBH,SAAS;UAAAI,KAAA;QAAA;UAAhC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAkC;YAAA,IAAvBC,QAAQ,GAAAJ,KAAA,CAAA9G,KAAA;YACfkH,QAAQ,CAAChG,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;UAC9B;QAAC,SAAA2D,GAAA;UAAAoC,SAAA,CAAAO,CAAA,CAAA3C,GAAA;QAAA;UAAAoC,SAAA,CAAAQ,CAAA;QAAA;MACL;MACAC,IAAA,CAAAC,eAAA,CAAAlJ,MAAA,CAAAmJ,SAAA,iBAAWrG,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;MAC5B,IAAI,IAAI,CAACuE,IAAI,IAAIvE,IAAI,CAACD,MAAM,IAAI,OAAOC,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE;QACvE,IAAI,CAAC2E,WAAW,GAAG1E,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC;MAC5C;IACJ;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAd,GAAA;IAAAE,KAAA,EAKA,SAAAoC,IAAID,EAAE,EAAE;MACJ,IAAMqF,IAAI,GAAG,IAAI;MACjB,IAAIC,IAAI,GAAG,KAAK;MAChB,OAAO,YAAmB;QACtB;QACA,IAAIA,IAAI,EACJ;QACJA,IAAI,GAAG,IAAI;QAAC,SAAAC,KAAA,GAAA/G,SAAA,CAAAC,MAAA,EAJIC,IAAI,OAAAC,KAAA,CAAA4G,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;UAAJ9G,IAAI,CAAA8G,KAAA,IAAAhH,SAAA,CAAAgH,KAAA;QAAA;QAKpBH,IAAI,CAAC3F,MAAM,CAAC;UACRC,IAAI,EAAEtE,UAAU,CAACwI,GAAG;UACpB7D,EAAE,EAAEA,EAAE;UACNH,IAAI,EAAEnB;QACV,CAAC,CAAC;MACN,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAf,GAAA;IAAAE,KAAA,EAMA,SAAAkG,MAAMrE,MAAM,EAAE;MACV,IAAMO,GAAG,GAAG,IAAI,CAAC9C,IAAI,CAACuC,MAAM,CAACM,EAAE,CAAC;MAChC,IAAI,UAAU,KAAK,OAAOC,GAAG,EAAE;QAC3BA,GAAG,CAAClB,KAAK,CAAC,IAAI,EAAEW,MAAM,CAACG,IAAI,CAAC;QAC5B,OAAO,IAAI,CAAC1C,IAAI,CAACuC,MAAM,CAACM,EAAE,CAAC;MAC/B,CAAC,MACI,CACL;IACJ;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAArC,GAAA;IAAAE,KAAA,EAKA,SAAA6F,UAAU1D,EAAE,EAAEkD,GAAG,EAAE;MACf,IAAI,CAAClD,EAAE,GAAGA,EAAE;MACZ,IAAI,CAACnD,SAAS,GAAGqG,GAAG,IAAI,IAAI,CAACD,IAAI,KAAKC,GAAG;MACzC,IAAI,CAACD,IAAI,GAAGC,GAAG,CAAC,CAAC;MACjB,IAAI,CAACtG,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC6I,YAAY,CAAC,CAAC;MACnB,IAAI,CAACpC,YAAY,CAAC,SAAS,CAAC;MAC5B,IAAI,CAACV,WAAW,CAAC,IAAI,CAAC;IAC1B;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAhF,GAAA;IAAAE,KAAA,EAKA,SAAA4H,aAAA,EAAe;MAAA,IAAAC,MAAA;MACX,IAAI,CAAC5I,aAAa,CAAC6I,OAAO,CAAC,UAACjH,IAAI;QAAA,OAAKgH,MAAI,CAACrB,SAAS,CAAC3F,IAAI,CAAC;MAAA,EAAC;MAC1D,IAAI,CAAC5B,aAAa,GAAG,EAAE;MACvB,IAAI,CAACC,UAAU,CAAC4I,OAAO,CAAC,UAACjG,MAAM,EAAK;QAChCgG,MAAI,CAACjF,uBAAuB,CAACf,MAAM,CAAC;QACpCgG,MAAI,CAAChG,MAAM,CAACA,MAAM,CAAC;MACvB,CAAC,CAAC;MACF,IAAI,CAAC3C,UAAU,GAAG,EAAE;IACxB;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAY,GAAA;IAAAE,KAAA,EAKA,SAAAoG,aAAA,EAAe;MACX,IAAI,CAACE,OAAO,CAAC,CAAC;MACd,IAAI,CAAC/F,OAAO,CAAC,sBAAsB,CAAC;IACxC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAT,GAAA;IAAAE,KAAA,EAOA,SAAAsG,QAAA,EAAU;MACN,IAAI,IAAI,CAACpG,IAAI,EAAE;QACX;QACA,IAAI,CAACA,IAAI,CAAC4H,OAAO,CAAC,UAACC,UAAU;UAAA,OAAKA,UAAU,CAAC,CAAC;QAAA,EAAC;QAC/C,IAAI,CAAC7H,IAAI,GAAGgD,SAAS;MACzB;MACA,IAAI,CAACzE,EAAE,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;IAC7B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfI;IAAAqB,GAAA;IAAAE,KAAA,EAgBA,SAAAhC,WAAA,EAAa;MACT,IAAI,IAAI,CAACe,SAAS,EAAE;QAChB,IAAI,CAAC8C,MAAM,CAAC;UAAEC,IAAI,EAAEtE,UAAU,CAAC2I;QAAW,CAAC,CAAC;MAChD;MACA;MACA,IAAI,CAACG,OAAO,CAAC,CAAC;MACd,IAAI,IAAI,CAACvH,SAAS,EAAE;QAChB;QACA,IAAI,CAACwB,OAAO,CAAC,sBAAsB,CAAC;MACxC;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;EAJI;IAAAT,GAAA;IAAAE,KAAA,EAKA,SAAAgI,MAAA,EAAQ;MACJ,OAAO,IAAI,CAAChK,UAAU,CAAC,CAAC;IAC5B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI;IAAA8B,GAAA;IAAAE,KAAA,EASA,SAAAkC,SAASA,SAAQ,EAAE;MACf,IAAI,CAAC3C,KAAK,CAAC2C,QAAQ,GAAGA,SAAQ;MAC9B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI;IAAApC,GAAA;IAAAC,GAAA,EASA,SAAAA,IAAA,EAAe;MACX,IAAI,CAACR,KAAK,CAACoC,QAAQ,GAAG,IAAI;MAC1B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAZI;IAAA7B,GAAA;IAAAE,KAAA,EAaA,SAAAgD,QAAQA,QAAO,EAAE;MACb,IAAI,CAACzD,KAAK,CAACyD,OAAO,GAAGA,QAAO;MAC5B,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAAlD,GAAA;IAAAE,KAAA,EAWA,SAAAiI,MAAMf,QAAQ,EAAE;MACZ,IAAI,CAACT,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,EAAE;MAC7C,IAAI,CAACA,aAAa,CAAC5D,IAAI,CAACqE,QAAQ,CAAC;MACjC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAApH,GAAA;IAAAE,KAAA,EAWA,SAAAkI,WAAWhB,QAAQ,EAAE;MACjB,IAAI,CAACT,aAAa,GAAG,IAAI,CAACA,aAAa,IAAI,EAAE;MAC7C,IAAI,CAACA,aAAa,CAACzF,OAAO,CAACkG,QAAQ,CAAC;MACpC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAjBI;IAAApH,GAAA;IAAAE,KAAA,EAkBA,SAAAmI,OAAOjB,QAAQ,EAAE;MACb,IAAI,CAAC,IAAI,CAACT,aAAa,EAAE;QACrB,OAAO,IAAI;MACf;MACA,IAAIS,QAAQ,EAAE;QACV,IAAMR,SAAS,GAAG,IAAI,CAACD,aAAa;QACpC,KAAK,IAAIpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqD,SAAS,CAAC9F,MAAM,EAAEyC,CAAC,EAAE,EAAE;UACvC,IAAI6D,QAAQ,KAAKR,SAAS,CAACrD,CAAC,CAAC,EAAE;YAC3BqD,SAAS,CAACpD,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;YACtB,OAAO,IAAI;UACf;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACoD,aAAa,GAAG,EAAE;MAC3B;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAA3G,GAAA;IAAAE,KAAA,EAIA,SAAAoI,aAAA,EAAe;MACX,OAAO,IAAI,CAAC3B,aAAa,IAAI,EAAE;IACnC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAZI;IAAA3G,GAAA;IAAAE,KAAA,EAaA,SAAAqI,cAAcnB,QAAQ,EAAE;MACpB,IAAI,CAACoB,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,EAAE;MAC7D,IAAI,CAACA,qBAAqB,CAACzF,IAAI,CAACqE,QAAQ,CAAC;MACzC,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAZI;IAAApH,GAAA;IAAAE,KAAA,EAaA,SAAAuI,mBAAmBrB,QAAQ,EAAE;MACzB,IAAI,CAACoB,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,EAAE;MAC7D,IAAI,CAACA,qBAAqB,CAACtH,OAAO,CAACkG,QAAQ,CAAC;MAC5C,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAjBI;IAAApH,GAAA;IAAAE,KAAA,EAkBA,SAAAwI,eAAetB,QAAQ,EAAE;MACrB,IAAI,CAAC,IAAI,CAACoB,qBAAqB,EAAE;QAC7B,OAAO,IAAI;MACf;MACA,IAAIpB,QAAQ,EAAE;QACV,IAAMR,SAAS,GAAG,IAAI,CAAC4B,qBAAqB;QAC5C,KAAK,IAAIjF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqD,SAAS,CAAC9F,MAAM,EAAEyC,CAAC,EAAE,EAAE;UACvC,IAAI6D,QAAQ,KAAKR,SAAS,CAACrD,CAAC,CAAC,EAAE;YAC3BqD,SAAS,CAACpD,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;YACtB,OAAO,IAAI;UACf;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACiF,qBAAqB,GAAG,EAAE;MACnC;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;AACA;EAHI;IAAAxI,GAAA;IAAAE,KAAA,EAIA,SAAAyI,qBAAA,EAAuB;MACnB,OAAO,IAAI,CAACH,qBAAqB,IAAI,EAAE;IAC3C;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAxI,GAAA;IAAAE,KAAA,EAOA,SAAA4C,wBAAwBf,MAAM,EAAE;MAC5B,IAAI,IAAI,CAACyG,qBAAqB,IAAI,IAAI,CAACA,qBAAqB,CAAC1H,MAAM,EAAE;QACjE,IAAM8F,SAAS,GAAG,IAAI,CAAC4B,qBAAqB,CAAC3B,KAAK,CAAC,CAAC;QAAC,IAAA+B,UAAA,GAAA7B,0BAAA,CAC9BH,SAAS;UAAAiC,MAAA;QAAA;UAAhC,KAAAD,UAAA,CAAA3B,CAAA,MAAA4B,MAAA,GAAAD,UAAA,CAAA1B,CAAA,IAAAC,IAAA,GAAkC;YAAA,IAAvBC,QAAQ,GAAAyB,MAAA,CAAA3I,KAAA;YACfkH,QAAQ,CAAChG,KAAK,CAAC,IAAI,EAAEW,MAAM,CAACG,IAAI,CAAC;UACrC;QAAC,SAAAwC,GAAA;UAAAkE,UAAA,CAAAvB,CAAA,CAAA3C,GAAA;QAAA;UAAAkE,UAAA,CAAAtB,CAAA;QAAA;MACL;IACJ;EAAC;EAAA,OAAAhJ,MAAA;AAAA,EA5xBuBV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}